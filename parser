using System;
using System.Globalization;
using System.Text.RegularExpressions;

public enum NumberFormatType
{
    French,
    English,
    Unknown
}

public static class AmountCleaner
{
    public static string CleanAmount(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "0.00";

        // If input has too many mixed digits and letters, skip it (e.g., 1TT1000 Euro29)
        if (HasAlphaNumericNoise(input))
            return "0.00";

        // Remove common currency symbols/words and unwanted characters
        string cleaned = Regex.Replace(input, @"[\p{Sc}€$₹£]|EURO|USD|INR|GBP", "", RegexOptions.IgnoreCase);
        cleaned = Regex.Replace(cleaned, @"[^0-9,.\s]", ""); // keep only digits, dot, comma, spaces
        cleaned = Regex.Replace(cleaned, @"\s+", ""); // remove all spaces

        // Detect if format is French or English
        NumberFormatType format = DetectNumberFormat(input);

        // Adjust separators based on format
        if (format == NumberFormatType.French)
        {
            // French: ',' is decimal, '.' is thousand
            cleaned = cleaned.Replace(".", "").Replace(",", ".");
        }
        else if (format == NumberFormatType.English)
        {
            // English: '.' is decimal, ',' is thousand
            cleaned = cleaned.Replace(",", "");
        }

        // Parse to decimal safely
        if (decimal.TryParse(cleaned, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal result))
        {
            return result.ToString("F2", CultureInfo.InvariantCulture);
        }

        // Fallback
        return "0.00";
    }

    // Detects whether the string is French, English or Unknown format
    private static NumberFormatType DetectNumberFormat(string input)
    {
        string upper = input.ToUpperInvariant();
        int commaIndex = input.IndexOf(',');
        int dotIndex = input.IndexOf('.');

        // Strong currency hint
        if (upper.Contains("€") || upper.Contains("EURO"))
            return NumberFormatType.French;

        if (upper.Contains("$") || upper.Contains("USD") || upper.Contains("INR") || upper.Contains("GBP") || upper.Contains("£") || upper.Contains("₹"))
            return NumberFormatType.English;

        // Punctuation fallback: 1,234.56 (English) vs 1.234,56 (French)
        if (commaIndex >= 0 && dotIndex >= 0)
        {
            return commaIndex < dotIndex ? NumberFormatType.English : NumberFormatType.French;
        }
        else if (commaIndex >= 0)
        {
            return NumberFormatType.French;
        }
        else if (dotIndex >= 0)
        {
            return NumberFormatType.English;
        }

        return NumberFormatType.Unknown;
    }

    // Helper to check if the input contains mixed alphanumeric noise (e.g., "1TT1000" or "1506h5")
    private static bool HasAlphaNumericNoise(string input)
    {
        // Look for any digit-letter-digit pattern
        return Regex.IsMatch(input, @"\d+[A-Za-z]+\d+");
    }
}
